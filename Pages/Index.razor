@page "/"

<h1>@Title</h1>

@if(!isSpelerB){	<span>Speler A is aan de beurt</span>
}
else
{
	<span>Speler B is aan de beurt</span>
}
<br />
<button @onclick="@restartGame">Opnieuw starten</button>
<br/>
<div class="container h-100" style="width: 600px; border-radius: 10px; background-repeat: no-repeat; background-size: cover; background-image: url('images/bg-wood.jpg'); padding: 40px">
	<div class="row h-50 justify-content-center align-items-center">
		<div class="col-4 col-class text-center" style="min-height:100px;padding-top: 10px;border-right: 3px solid rgba(66,33,0,.54); border-bottom: 3px solid rgba(66,33,0,.54)"
			 @onclick="@(() => ClickCell(0, 0))">@CellInhoud(0, 0)</div>
		<div class="col-4 col-class text-center" style="min-height:100px;padding-top: 10px;border-right: 3px solid rgba(66,33,0,.54); border-bottom: 3px solid rgba(66,33,0,.54)"
			 @onclick="@(() => ClickCell(0, 1))">@CellInhoud(0,1)</div>
		<div class="col-4  col-class text-center" style="min-height:100px;padding-top: 10px; border-bottom: 3px solid rgba(66,33,0,.54)"
			 @onclick="@(()=>ClickCell(0, 2))">@CellInhoud(0,2)</div>
	</div>

	<div class="row h-50 justify-content-center align-items-center">
		<div class="col-4 col-class text-center" style="min-height:100px;padding-top: 10px;border-right: 3px solid rgba(66,33,0,.54); border-bottom: 3px solid rgba(66,33,0,.54)"
			 @onclick="@(()=>ClickCell(1, 0))">@CellInhoud(1,0)</div>
		<div class="col-4 col-class text-center" style="min-height:100px;padding-top: 10px;border-right: 3px solid rgba(66,33,0,.54); border-bottom: 3px solid rgba(66,33,0,.54)"
			 @onclick="@(()=>ClickCell(1, 1))">@CellInhoud(1,1)</div>
		<div class="col-4  col-class text-center" style="min-height:100px; padding-top: 10px; border-bottom: 3px solid rgba(66,33,0,.54)"
			 @onclick="@(()=>ClickCell(1, 2))">@CellInhoud(1,2)</div>
	</div>
	<div class="row h-50 justify-content-center align-items-center">
		<div class="col-4 col-class text-center" style="min-height:100px; padding-top: 10px;border-right: 3px solid rgba(66,33,0,.54);"
			 @onclick="@(()=>ClickCell(2, 0))">@CellInhoud(2,0)</div>
		<div class="col-4 col-class text-center" style="min-height:100px;padding-top: 10px;border-right: 3px solid rgba(66,33,0,.54);"
			 @onclick="@(()=>ClickCell(2, 1))">@CellInhoud(2,1)</div>
		<div class="col-4  col-class text-center" style="min-height:100px;padding-top: 10px;"
			 @onclick="@(()=>ClickCell(2, 2))">@CellInhoud(2,2)</div>
	</div>
</div>
@* <div class="row h-50 justify-content-center align-items-center">
	</div>
	<div class="row h-50 justify-content-center align-items-center"></div> *@

@code{
	enum vakjeStatus
	{
		vsLeeg,
		vsSpelerA, // rondje
		vsSpelerB  // kruisje
	};

	vakjeStatus[,] spelStatus = new vakjeStatus[3, 3];

	string Title = "Boter Kaas en Eieren";

	bool isSpelerB = false;

	void restartGame()
	{
		Title = "Boter Kaas en Eieren";
		for (int r = 0; r < 3; r++)
		{
			for (var c = 0; c < 3; c++)
				spelStatus[r, c] = vakjeStatus.vsLeeg;
		}
	}

	void ClickCell(int row, int col)
	{
		if (TelLegeVakjes() == 0)
			return;

		if (spelStatus[row, col] == vakjeStatus.vsLeeg)
		{

			if (isSpelerB)
			{
				spelStatus[row, col] = vakjeStatus.vsSpelerB;
				// controleren of speler B 3 op een rij heeft
				if (CheckWinner(vakjeStatus.vsSpelerB))
				{
					Title = "Speler B heeft gewonnen";
					return;
				}
			}
			else
			{
				spelStatus[row, col] = vakjeStatus.vsSpelerA;
				// controleren of speler A 3 op een rij heeft
				if (CheckWinner(vakjeStatus.vsSpelerA))
				{
					Title = "Speler A heeft gewonnen";
					return;
				}
			}

			if (TelLegeVakjes() == 0)
			{
				Title = "Gelijkspel";
				return;
			}
			isSpelerB = !isSpelerB;
		}

		InvokeAsync(StateHasChanged);
	}

	int TelLegeVakjes()
	{		
		int result = 0;
		for (int r = 0; r < 3; r++)
		{
			for (var c = 0; c < 3; c++)
			{
				if (spelStatus[r, c] == vakjeStatus.vsLeeg)
					result++;
			}
		}
		return result;
	}

	bool CheckWinner(vakjeStatus speler)
	{
		if (
			//alle rijen
			(spelStatus[0, 0] == speler && spelStatus[0, 1] == speler && spelStatus[0, 2] == speler) ||
			(spelStatus[1, 0] == speler && spelStatus[1, 1] == speler && spelStatus[1, 2] == speler) ||
			(spelStatus[2, 0] == speler && spelStatus[2, 1] == speler && spelStatus[2, 2] == speler) ||
			//alle colommen
			(spelStatus[0, 0] == speler && spelStatus[1,0] == speler && spelStatus[2,0] == speler) ||
			(spelStatus[0, 1] == speler && spelStatus[1, 1] == speler && spelStatus[2,1] == speler) ||
			(spelStatus[0,2] == speler && spelStatus[1,2] == speler && spelStatus[2, 2] == speler) ||
			//alle schuinen
			(spelStatus[0,0] == speler && spelStatus[1, 1] == speler && spelStatus[2, 2] == speler) ||
			(spelStatus[0, 2] == speler && spelStatus[1, 1] == speler && spelStatus[2, 0] == speler)
			)
			return true;

		return false;
	}

	MarkupString CellInhoud(int row, int col)
	{
		vakjeStatus status = spelStatus[row, col];

		switch (status)
		{
			case vakjeStatus.vsSpelerA:
				return new MarkupString("<span style='font-size: 4rem; color: green' class='oi oi-aperture'></span>");
			case vakjeStatus.vsSpelerB:
				return new MarkupString("<span style='font-size: 4rem; color: red' class='oi oi-medical-cross'></span>");
				//default:
				//return "";
		}
		return new MarkupString("");
	}

}