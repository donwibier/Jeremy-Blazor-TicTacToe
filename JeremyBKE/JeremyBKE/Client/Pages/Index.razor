@page "/"
@inject IJSRuntime JSRuntime
<div class="top-row px-4 d-flex justify-content-between">	
	<div class="no-mobile">
		<strong>@Title</strong>
	</div>
	<div class="badge badge-info shadow">
		@if (!isSpelerB)
		{
			<span>Speler A is aan de beurt</span>
		}
		else
		{
			<span>Speler B is aan de beurt</span>
		}
	</div>
	<div>
		<button class="btn btn-warning shadow" @onclick="@restartGame">Opnieuw</button>
	</div>
</div>

<div class="content px-4">
	<div class="container shadow d-flex flex-column">
		<div class="row d-flex flex-row">
			<div class="cell p-2 border-br" @onclick="@(async () => await ClickCell(0, 0))">@CellInhoud(0, 0)</div>
			<div class="cell p-2 border-br" @onclick="@(async () => await ClickCell(0, 1))">@CellInhoud(0, 1)</div>
			<div class="cell p-2 border-b" @onclick="@(async () => await ClickCell(0, 2))">@CellInhoud(0, 2)</div>
		</div>
		<div class="row">
			<div class="cell p-2 border-br" @onclick="@(async () => await ClickCell(1, 0))">@CellInhoud(1, 0)</div>
			<div class="cell p-2 border-br" @onclick="@(async () => await ClickCell(1, 1))">@CellInhoud(1, 1)</div>
			<div class="cell p-2 border-b" @onclick="@(async () => await ClickCell(1, 2))">@CellInhoud(1, 2)</div>
		</div>
		<div class="row">
			<div class="cell p-2 border-r" @onclick="@(async () => await ClickCell(2, 0))">@CellInhoud(2, 0)</div>
			<div class="cell p-2 border-r" @onclick="@(async () => await ClickCell(2, 1))">@CellInhoud(2, 1)</div>
			<div class="cell p-2" @onclick="@(async () => await ClickCell(2, 2))">@CellInhoud(2, 2)</div>
		</div>
	</div>
</div>


@code{
	enum vakjeStatus
	{
		vsLeeg,
		vsSpelerA, // rondje
		vsSpelerB  // kruisje
	};

	vakjeStatus[,] spelStatus = new vakjeStatus[3, 3];
	vakjeStatus winner = vakjeStatus.vsLeeg;

	string Title = "Boter Kaas en Eieren";

	bool isSpelerB = false;

	void restartGame()
	{
		Title = "Boter Kaas en Eieren by Jeremy";
		winner = vakjeStatus.vsLeeg;
		for (int r = 0; r < 3; r++)
		{
			for (var c = 0; c < 3; c++)
				spelStatus[r, c] = vakjeStatus.vsLeeg;
		}
	}

	async Task ClickCell(int row, int col)
	{
		if (!HasLegeVakjes() || winner != vakjeStatus.vsLeeg)
			return;

		if (spelStatus[row, col] == vakjeStatus.vsLeeg)
		{
			if (isSpelerB)
			{
				spelStatus[row, col] = vakjeStatus.vsSpelerB;
				// controleren of speler B 3 op een rij heeft
				if (CheckWinner(vakjeStatus.vsSpelerB))
				{
					winner = vakjeStatus.vsSpelerB;
					Title = "Speler B heeft gewonnen";
					await JSRuntime.InvokeVoidAsync("alert", "Speler B heeft gewonnen");
					return;
				}
			}
			else
			{
				spelStatus[row, col] = vakjeStatus.vsSpelerA;
				// controleren of speler A 3 op een rij heeft
				if (CheckWinner(vakjeStatus.vsSpelerA))
				{
					winner = vakjeStatus.vsSpelerA;
					Title = "Speler A heeft gewonnen";
					await JSRuntime.InvokeVoidAsync("alert", "Speler A heeft gewonnen");
					return;
				}
			}

			if (!HasLegeVakjes())
			{
				Title = "Gelijkspel";
				await JSRuntime.InvokeVoidAsync("alert", "Gelijkspel");
				return;
			}
			isSpelerB = !isSpelerB;
		}

		InvokeAsync(StateHasChanged);
	}

	bool HasLegeVakjes()
	{
		for (int r = 0; r < 3; r++)
		{
			for (var c = 0; c < 3; c++)
			{
				if (spelStatus[r, c] == vakjeStatus.vsLeeg)
					return true;
			}
		}
		return false;
	}

	bool CheckWinner(vakjeStatus speler)
	{
		if (
			//alle rijen
			(spelStatus[0, 0] == speler && spelStatus[0, 1] == speler && spelStatus[0, 2] == speler) ||
			(spelStatus[1, 0] == speler && spelStatus[1, 1] == speler && spelStatus[1, 2] == speler) ||
			(spelStatus[2, 0] == speler && spelStatus[2, 1] == speler && spelStatus[2, 2] == speler) ||
			//alle colommen
			(spelStatus[0, 0] == speler && spelStatus[1, 0] == speler && spelStatus[2, 0] == speler) ||
			(spelStatus[0, 1] == speler && spelStatus[1, 1] == speler && spelStatus[2, 1] == speler) ||
			(spelStatus[0, 2] == speler && spelStatus[1, 2] == speler && spelStatus[2, 2] == speler) ||
			//alle schuinen
			(spelStatus[0, 0] == speler && spelStatus[1, 1] == speler && spelStatus[2, 2] == speler) ||
			(spelStatus[0, 2] == speler && spelStatus[1, 1] == speler && spelStatus[2, 0] == speler)
			)
			return true;

		return false;
	}

	MarkupString CellInhoud(int row, int col)
	{
		vakjeStatus status = spelStatus[row, col];

		switch (status)
		{
			case vakjeStatus.vsSpelerA:
				return new MarkupString("<span style='font-size: 3rem; color: green' class='oi oi-aperture'></span>");				
			case vakjeStatus.vsSpelerB:
				return new MarkupString("<span style='font-size: 3rem; color: red' class='oi oi-medical-cross'></span>");
				//default:
				//return "";
		}
		return new MarkupString("");
	}

}
